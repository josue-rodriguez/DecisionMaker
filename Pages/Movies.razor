@page "/movies"
@inject Blazored.LocalStorage.ILocalStorageService LocalStore
@inject Activity movies 


<h3>Movies</h3>

<span style="font-size: 24px">@movies.Decision</span>

<br />

<button class="btn-choose" @onclick="(() => movies.MakeDecision())">Decide a Movie</button>

<hr />

<input class="input-josue" placeholder="e.g., The Room" @bind-value="NewChoice" @bind-value:event="oninput" @onkeyup="AddChoiceOnEnter" />
<button class="btn-add" @onclick="AddChoiceToChoices">Add Movie</button>
<button class="btn-choose" @onclick="ClearLocalStorage">Clear All</button>

    <ul>
        @foreach (var choice in movies.Items)
        {
            <li>
                <span>@choice.Name</span>
                <button class="btn-remove" @onclick="(() => RemoveChoice(choice.Name))">x</button>
            </li>
        }
    </ul>

@code {
    //public Activity movies = new Activity { };
    private string NewChoice;
    const string Key = "MovieList";

    // Reload items on return, or initiate new list if empty
    protected override async Task OnInitializedAsync()
    {
        movies = await LocalStore.GetItemAsync<Activity>(Key);

        if (movies == null || movies.Items.Count == 0)
        {
            movies = new Activity { };
        }

    }

    // Method to save list to local storage
    public async void UpdateLocalStorage()
    {
        await LocalStore.SetItemAsync(Key, movies);
    }

    // Method to clear local storage
    public async void ClearLocalStorage()
    {
        movies.Items.Clear();
        await LocalStore.ClearAsync();
    }

    // Method for adding option to choices
    public void AddChoiceToChoices()

    {
        bool isNotEmpty = !string.IsNullOrWhiteSpace(NewChoice);
        bool isNewChoice = !movies.Items.Any(choice => choice.Name == NewChoice);

        if (isNotEmpty && isNewChoice)
        {
            var item = new Choice { Name = NewChoice };


            movies.Items.Add(item);

            NewChoice = string.Empty;

            UpdateLocalStorage();
        }

    }

    // Method for adding choices on "Enter"
    public void AddChoiceOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddChoiceToChoices();
        }
    }

    // Method for removing a choice
    public void RemoveChoice(string ChoiceToRemove)
    {
        var ItemToRemove = movies.Items.Single(choice => choice.Name == ChoiceToRemove);
        movies.Items.Remove(ItemToRemove);
        UpdateLocalStorage();
    }
}
